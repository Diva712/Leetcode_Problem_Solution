Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1

############
solution

class Solution {
public:
    int merge(vector<int>&nums , int low ,  int mid , int high){
        int j = mid+1;
        int cnt = 0;
        for(int i=low ; i<=mid ; i++){
            while(j<=high && nums[i]>2LL*nums[j]){
                j++;
            }
            cnt+=(j-(mid+1));
        }

        int left = low;
        int right = mid+1;
        vector<int>vec;
        while(left<=mid && right<=high){
            if(nums[left] < nums[right]){
                vec.push_back(nums[left]);
                left++;
            }
            else{
                vec.push_back(nums[right]);
                right++;
            }
        }

        while(left<=mid){
            vec.push_back(nums[left]);
            left++;
        }

        while(right<=high){
            vec.push_back(nums[right]);
            right++;
        }

        for(int i=low ; i<=high ; i++){
            nums[i] = vec[i-low];
        }

        return cnt;
    }
    int mergesort(vector<int>&nums , int low , int high){
        int a , mid;
        mid = (low+high)/2;
        if(low>=high){
            return 0;
        }
        a = mergesort(nums , low , mid);
        a+= mergesort(nums , mid+1 , high);
        a+= merge(nums , low , mid , high);
        return a;
    }
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        return mergesort(nums, 0, n-1);
    }
};
