The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

############
solution
class Solution {
public:
    void function (int col ,vector<string>&board , vector<vector<string>>&vec , int n , vector<int>&left , vector<int>&left_d , vector<int>&right_d){
        if(col == n){
            vec.push_back(board);
            return;
        }
        for(int row = 0 ; row<n ; row++){
            if(left[row]==0 && left_d[row + col]==0 && right_d[(n-1)+(col-row)]==0){
                left[row] = 1;
                left_d[row+col] = 1;
                right_d[(n-1)+(col-row)] = 1;
                board[row][col] = 'Q';
                function(col+1 , board , vec , n , left , left_d , right_d);
                left[row] = 0;
                left_d[row+col] = 0;
                right_d[(n-1)+(col-row)] = 0;
                board[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string>board(n);
        vector<vector<string>>vec;
        vector<int>left(n,0);
        vector<int>left_d(2*n-1 , 0);
        vector<int>right_d(2*n-1 , 0);
        string s (n,'.');
        for(int i=0 ; i<n ; i++){
            board[i] = s;
        }
        function(0 , board , vec , n , left , left_d , right_d);
        return vec;
    } 
};
