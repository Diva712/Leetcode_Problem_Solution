The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 

Example 1:


Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.
Example 2:

Input: n = 1
Output: 1

###########
solution
class Solution {
public:
    void solve (int i ,int &cnt ,vector<bool>&col , vector<bool>&row , vector<bool>&left_D , vector<bool>&right_D){
        if(i == row.size()){
            cnt++;
            return;
        }
        for(int j = 0 ; j<col.size() ; j++){
            if(col[j] && left_D[i+j] && right_D[(col.size()-1)+(i-j)]){
                row[i] = j; // for assigning the queen
                col[j] = false;
                left_D[i+j] = false;
                right_D[(col.size()-1)+(i-j)] = false;
                solve(i+1 , cnt , col , row, left_D , right_D);
                col[j] = true; // backtracking 
                left_D[i+j] = true; // backtracking
                right_D[(col.size()-1)+(i-j)] = true; // backtracking
            }
        }
    }
    int totalNQueens(int n) {
        int cnt = 0;
        vector<bool>col(n , true);
        vector<bool>left_D(2*n-1 , true);
        vector<bool>right_D(2*n-1 , true);
        vector<bool>row(n,0);
        solve(0 , cnt , col , row , left_D , right_D);
        return cnt;
    }
};
